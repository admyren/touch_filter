
//#include "stm32f4xx.h"
#include "gpio.h"
#include "rcc.h"
#include "stm32_uart.h"

#define DELAY 1000000

#define UART_BUFF_SIZE 50
volatile uint8_t UART_buff[UART_BUFF_SIZE];

volatile uint32_t count;

void SystemClock_Config(void);

void sysclk_init(void)
{
   clock_conf_t clk_conf;

   clk_conf.source = HSE_CLK;
   clk_conf.PLL_enable = enable;
   clk_conf.PLLM = 16;
   clk_conf.PLLN = 336;
   clk_conf.PLLP = 2;
   clk_conf.PLLQ = 7;
   clk_conf.AHB_prescaler = AHB_DIV_NO_DIV; /* 168 MHz */
   clk_conf.APB1_prescaler = APB_DIV_4; /* 42 MHz */
   clk_conf.APB2_prescaler = APB_DIV_2; /* 84 MHz */

   RCC_PLL_config(RCC, &clk_conf);
}

#if 0
void init_uart(void)
{
   uart_config_t uart_conf;
   gpio_config_t gpio_conf;

   // GPIOC clock enable
   RCC->AHB1ENR |= (1 << 2);
   // UART4 clock enable
   RCC->APB1ENR |= (1 << 19);

   gpio_conf.mode = gpio_af;
   gpio_conf.alternate_func = gpio_af_8;
   gpio_conf.pins = gpio_pin_10 | gpio_pin_11;

   uart_conf.baud_rate = BAUD_115200;
   uart_conf.stop_bits = STOP_BITS_1;
   uart_conf.data_bits = DATA_BITS_8;
   uart_conf.parity_enable = disable;
   uart_conf.TX_enable = enable;
   uart_conf.RX_enable = disable;

   gpio_init(GPIOC, &gpio_conf);

   UART_config(UART4, &uart_conf);

}
#endif
void gpio_init_test(void)
{
#if 0
   RCC->AHB1ENR |= (1 << 2);

   GPIOC->MODER |= (1 << 4);

#else
   gpio_config_t gpio_conf;

   gpio_conf.mode = gpio_gpo;
   gpio_conf.output_type = gpio_opp;
   gpio_conf.output_speed = gpio_ms;
   gpio_conf.pull_up_down = gpio_no_pull;
   gpio_conf.alternate_func = gpio_af_0;
   gpio_conf.lock = gpio_lock_off;
   gpio_conf.pins = gpio_pin_2 | gpio_pin_3;

   RCC->AHB1ENR |= (1 << 2);
   gpio_init(GPIOC, &gpio_conf);
#endif
}


int main(void)
{

   //sysclk_init();
   SystemClock_Config();
   gpio_init_test();
   //init_uart();
   UART_Init(UART4, 115200, (uint8_t*)UART_buff, UART_BUFF_SIZE);


   while(1)
   {
#if 1
      for(count=0; count<DELAY; count++);
      gpio_pin_set(GPIOC, gpio_pin_2);
      gpio_pin_reset(GPIOC, gpio_pin_3);
      for(count=0; count<DELAY; count++);
      gpio_pin_set(GPIOC, gpio_pin_3);
      gpio_pin_reset(GPIOC, gpio_pin_2);

      //UART_Transmit(UART4, (uint8_t *)"hejhej", 0);

      //UART_tx(UART4, (uint8_t*)"hejhej", 6);
#endif
#if 0
      for(count=0; count<DELAY; count++);
      GPIOC->ODR ^= (1 << 2);
#endif
   }
}

void DMA1_Stream2_IRQHandler(void)
{
   // Transfer complete interrupt?
   if(DMA1->LISR & (1 << 21))
   {
      // Clear interrupt flag
      DMA1->LIFCR |= 1 << 21;
      // Enable DMA stream again
      DMA1_Stream2->NDTR = UART_BUFF_SIZE;
      DMA1_Stream2->CR |= (1 << 0);
   }
}

void UART4_IRQHandler(void)
{
   // Idle line detect interrupt?
   if(UART4->SR & (1 << 4))
   {
      // Disable DMA stream to force transfer complete interrupt
      DMA1_Stream2->CR &= ~(1 << 0);
      uint8_t dummy = UART4->DR;
      (void)dummy; // Prevent compiler warnings
   }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks
    */
#if 0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16; // 1MHz clock input to PLL
  RCC_OscInitStruct.PLL.PLLN = 360; // PLL multiplier, output of PLL = 1*360 = 360MHz
  RCC_OscInitStruct.PLL.PLLP = 2; // System clock = output of PLL / 2 = 180MHz
  RCC_OscInitStruct.PLL.PLLQ = 7;
#else
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  //RCC_OscInitStruct.HSECalibrationValue = 8;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 16; // 1MHz clock input to PLL
  RCC_OscInitStruct.PLL.PLLN = 336; // PLL multiplier, output of PLL = 1*360 = 360MHz
  RCC_OscInitStruct.PLL.PLLP = 2; // System clock = output of PLL / 2 = 180MHz
  RCC_OscInitStruct.PLL.PLLQ = 7;

#endif
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    //_Error_Handler(__FILE__, __LINE__);
  }

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK |
                              RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    //_Error_Handler(__FILE__, __LINE__);
  }

  SystemCoreClockUpdate();


  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
  /**Configure the Systick interrupt time
  */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  /* SysTick_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
}
