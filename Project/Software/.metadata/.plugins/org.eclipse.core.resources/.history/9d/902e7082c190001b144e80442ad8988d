/*
 * stm32_uart.h
 *
 *  Created on: 28 mars 2021
 *      Author: Myren
 */

#ifndef STM32_UART_H_
#define STM32_UART_H_

#include <stdint.h>

#include "common.h"

#define UART_1_ADDR 0x40011000
#define UART_2_ADDR 0x40004400
#define UART_3_ADDR 0x40004800
#define UART_4_ADDR 0x40004C00
#define UART_5_ADDR 0x40005000
#define UART_6_ADDR 0x40011400

typedef struct
{
   volatile uint32_t SR;
   volatile uint32_t DR;
   volatile uint32_t BRR;
   volatile uint32_t CR1;
   volatile uint32_t CR2;
   volatile uint32_t CR3;
   volatile uint32_t GTPR;
}uart_reg_t;

#define UART1 ((usart_reg_t*)UART_1_ADDR
#define UART2 ((usart_reg_t*)UART_2_ADDR
#define UART3 ((usart_reg_t*)UART_3_ADDR
#define UART4 ((usart_reg_t*)UART_4_ADDR
#define UART5 ((usart_reg_t*)UART_5_ADDR
#define UART6 ((usart_reg_t*)UART_6_ADDR

typedef enum
{
   STOP_BITS_1 = 0,
   STOP_BITS_2,
}uart_stop_bit_e;

typedef enum
{
   DATA_BITS_8 = 0,
   DATA_BITS_9
}uart_data_bits_e;

typedef enum
{
   PARITY_EVEN = 0,
   PARITY_ODD
}uart_parity_e;

typedef enum
{
   BAUD_9600 = 9600,
   BAUD_19200 = 19200,
   BAUD_38400 = 38400,
   BAUD_57600 = 57600,
   BAUD_115200 = 115200
}uart_baud_rates_e;

typedef struct
{
   uart_baud_rates_e baud_rate;
   uart_stop_bit_e stop_bits;
   uart_data_bits_e data_bits;
   enable_disable_e parity_enable;
   uart_parity_e parity;
   enable_disable_e RX_enable;
   enable_disable_e TX_enable;
}uart_config_t;

uint32_t UART_config(uart_reg_t* uart_dev, uart_config_t* uart_conf)
{
   uint32_t ret = 0;
   uint32_t hclk;
   uint32_t uart_div;

   /* Set OVER8 bit to over sample by 8 */
   uart_dev->CR1 |= 1 << 15;

   /* UART 2, 3, 4 and 5 is part of APB1 and uses
    * UART 1 and 6 is part of APB2 */

   hclk = RCC_get_APB1_freq();
   uart_div = (2000000 * hclk) / uart_conf->baud_rate;
   uart_dev->BRR = uart_div;

   return(ret);
}




#endif /* STM32_UART_H_ */
